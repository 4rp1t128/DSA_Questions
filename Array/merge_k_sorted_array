
#include<bits/stdc++.h>
#define N 105
using namespace std;
void printArray(vector<int> arr, int size)
{
for (int i=0; i < size; i++)
	cout << arr[i] << " ";
}



class node{
  public:
    int data;
    int  i;//row
    int j;//column
    
    
    node(int data,int row,int col){
        this->data=data;
        i=row;
        j=col;
    }
};

class compare{
  public :
    bool operator()(node* a, node* b){
        return a->data > b-> data;
    }
};

class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int k)
    {
        //code here
        priority_queue<node*, vector<node*> , compare> minheap; 
        for(int i=0;i<k;i++){
            node *temp=new node(arr[i][0],i,0);
            minheap.push(temp);
        }
        
        vector<int> ans;
        
        while(minheap.size()>0){
            node *temp=minheap.top();
            minheap.pop();
            ans.push_back(temp->data);
            
            int rowindex=temp->i;
            int colindex=temp->j;
            if(colindex+1<arr[rowindex].size()){
                node *next=new node(arr[rowindex][colindex+1],rowindex,colindex+1);
                minheap.push(next);
                
            }
        }
        
        return ans;
    }
};



int main()
{
	int t;
	cin>>t;
	while(t--){
	    int k;
	    cin>>k;
	    vector<vector<int>> arr(k, vector<int> (k, 0));
	    for(int i=0; i<k; i++){
	        for(int j=0; j<k; j++)
	        {
	            cin>>arr[i][j];
	        }
	    }
	    Solution obj;
    	vector<int> output = obj.mergeKArrays(arr, k);
    	printArray(output, k*k);
    	cout<<endl;
    }
	return 0;
}
